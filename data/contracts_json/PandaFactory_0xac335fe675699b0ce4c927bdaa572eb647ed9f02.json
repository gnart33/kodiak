{
  "language": "Solidity",
  "sources": {
    "src/panda/PandaFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\nimport {IPandaPool} from \"src/interfaces/IPandaPool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"src/interfaces/IPandaFactory.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {PandaMath} from \"src/libraries/PandaMath.sol\";\nimport {TransferHelper} from \"src/libraries/TransferHelper.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {IWETH} from \"src/interfaces/IWETH.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract PandaFactory is Ownable, IPandaFactory, ReentrancyGuard {\n    using Math for uint256;\n\n    //Panda Configs (can be set by owner)\n    PandaFees private poolFees = PandaFees({buyFee: 0, sellFee: 200, graduationFee: 500, deployerFeeShare: 0});\n    address public override treasury;\n    address public override wbera;\n    mapping(address => uint256) public override minRaise;\n    mapping(address => uint256) public override minTradeSize;\n\n    //Panda Pool Constants - bounding the conditions reasonably\n    uint256 public override constant MIN_TOKENSINPOOL_SHARE = 5000; //50%\n    uint256 public override constant MAX_TOKENSINPOOL_SHARE = 9000; //90%\n    uint256 public override constant MIN_SQRTP_MULTIPLE = 11_000; //1.1x in sqrtP minimum distance\n    uint256 public override constant MAX_SQRTP_MULTIPLE = 10*10_000; //10x in sqrtP = 100x in P = ~90% tokensInPool\n\n    //Panda Token Defaults\n    uint256 public override constant TOKEN_SUPPLY = 1_000_000_000 * 1e18;\n    uint16 public override constant DEPLOYER_MAX_BPS = 5000; // 50%\n\n    //Move Liquidity Defaults\n    address public dexFactory; //UniV2 style dex factory\n    bytes32 public initCodeHash; //UniV2 style initCodeHash (for deterministic pair creation)\n\n    //List of allowed implementations of PandaPools. Multiple canonical implementations can be allowed\n    mapping(address => bool) public override isImplementationAllowed;\n    address[] public override allowedImplementations;\n\n    //Deployer incentives\n    address public override incentiveToken;\n    uint256 public override incentiveAmount;\n    mapping(address => bool) public override poolToIncentiveClaimed;\n    mapping(address => uint256) public override deployerNonce; //Keep track of how many deployments by each deployer (for deterministic address)\n\n    //Deployed Pools information\n    address[] public override allPools; //list of all pandaPools\n    mapping(address => address) public override poolToImplementation; //map pandaPool to canonical implementation (e.g. PandaToken)\n\n    //*********************** CONSTRUCTOR ***************************************************\n    constructor(address _treasury, address _dexFactory, bytes32 _initCodeHash, address _wbera) {\n        treasury = _treasury;\n        dexFactory = _dexFactory;\n        initCodeHash = _initCodeHash;\n        wbera = _wbera;\n        _transferOwnership(_treasury);\n    }\n\n    //*********************** EXTERNAL FUNCTIONS *********************************************\n    //To deploy a PandaToken + PandaPool with optional deployer buy\n    function deployPandaToken(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        string calldata name,\n        string calldata symbol,\n        uint16 deployerSupplyBps\n    ) external nonReentrant override returns (address pandaToken) {\n        require(deployerSupplyBps <= DEPLOYER_MAX_BPS, \"PandaFactory: INVALID_DEPLOYER_BUY\");\n        pandaToken = _deployPandaToken(implementation, pp, name, symbol);\n\n        if(deployerSupplyBps > 0) {\n            _buyTokens(pandaToken, pp.baseToken, deployerSupplyBps);\n        }\n    }\n\n     function deployPandaTokenWithBera(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        string calldata name,\n        string calldata symbol,\n        uint16 deployerSupplyBps\n    ) external payable nonReentrant override returns (address pandaToken) {\n        require(wbera == pp.baseToken, \"PandaFactory: INVALID_BERA\");\n        require(deployerSupplyBps <= DEPLOYER_MAX_BPS, \"PandaFactory: INVALID_DEPLOYER_BUY\");\n        pandaToken = _deployPandaToken(implementation, pp, name, symbol);\n\n        if(msg.value > 0) {\n            uint256 amountIn = _buyTokensWithBera(pandaToken, deployerSupplyBps);\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountIn);\n        }\n    }\n\n    //To deploy an implementation of PandaPool that's not also creating a PandaToken\n    //This requires specifying the PandaToken, and approving the tokens to be sent to the pool from the deployer\n    function deployPandaPool(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        uint256 totalTokens,\n        address pandaToken,\n        bytes calldata data\n    ) external nonReentrant override returns (address) {\n        require(isImplementationAllowed[implementation], \"PandaFactory: INVALID_IMPLEMENTATION\");\n        IPandaPool panda = IPandaPool(implementation);\n        require(!panda.isPandaToken(), \"PandaFactory: IS_PANDATOKEN\");\n        require(pandaToken != address(0), \"PandaFactory: INVALID_PANDATOKEN\");\n\n        //Check inputs are good\n        _checkDeploymentInputs(pp, totalTokens, panda);\n\n        //Deploy\n        IPandaPool pandaPool = _createClone(implementation, msg.sender);\n\n        //Send in the pandaTokens\n        TransferHelper.safeTransferFrom(pandaToken, msg.sender, address(pandaPool), totalTokens);\n\n        //Initialize\n        pandaPool.initializePool(\n            pandaToken,\n            pp,\n            totalTokens,\n            msg.sender,\n            data\n        );\n\n        //Push to list\n        allPools.push(address(pandaPool));\n        poolToImplementation[address(pandaPool)] = implementation;\n        emit PandaDeployed(address(pandaPool), address(implementation));\n        return address(pandaPool);\n    }\n\n\n    function _deployPandaToken(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        string calldata name,\n        string calldata symbol\n    ) internal returns (address) {\n        require(isImplementationAllowed[implementation], \"PandaFactory: INVALID_IMPLEMENTATION\");\n        IPandaPool panda = IPandaPool(implementation);\n\n        {\n            //Check inputs are good\n            require(panda.isPandaToken(), \"PandaFactory: NOT_PANDATOKEN\");\n            _checkDeploymentInputs(pp, TOKEN_SUPPLY, panda);\n        }\n\n        //Deploy\n        IPandaPool pandaToken = _createClone(implementation, msg.sender);\n\n        //Initialize\n        {\n            bytes memory data = abi.encode(name, symbol);\n            pandaToken.initializePool(\n                address(pandaToken),\n                pp,\n                TOKEN_SUPPLY,\n                msg.sender,\n                data\n            );\n        }\n\n        //Push to list\n        {\n            allPools.push(address(pandaToken));\n            poolToImplementation[address(pandaToken)] = implementation;\n            emit PandaDeployed(address(pandaToken), address(implementation));\n        }\n        return address(pandaToken);\n    }\n\n    function _buyTokens(address pool, address baseToken, uint16 deployerSupplyBps) internal {\n        uint256 amountOut = TOKEN_SUPPLY * deployerSupplyBps / PandaMath.FEE_SCALE;\n\n        try IPandaPool(pool).getAmountInBuy(amountOut) returns (uint256 amountIn, uint256, uint256) {\n            uint256 allowance = IERC20(baseToken).allowance(msg.sender, address(this));\n            if(allowance < amountIn) {\n                return;\n            }\n            // Proceed with the transfers and token buy if getAmountInBuy doesn't revert\n            TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), amountIn);\n            TransferHelper.safeApprove(baseToken, address(pool), amountIn);\n            IPandaPool(pool).buyTokens(amountIn, amountOut * 9900/10000, msg.sender);\n        } catch {\n            return;\n        }\n    }\n\n    function _buyTokensWithBera(address pool, uint16 deployerSupplyBps) internal returns (uint256) {\n        uint256 amountOut = TOKEN_SUPPLY * deployerSupplyBps / PandaMath.FEE_SCALE;\n\n        try IPandaPool(pool).getAmountInBuy(amountOut) returns (uint256 amountIn, uint256, uint256) {\n            if(msg.value < amountIn) {\n                TransferHelper.safeTransferETH(msg.sender, msg.value);\n                return 0;\n            }\n            IPandaPool(pool).buyTokensWithBera{value: amountIn}(amountOut * 9900/10000, msg.sender);\n            return amountIn;\n        } catch {\n            return 0;\n        }\n    }\n    \n    function _createClone(address _implementation, address _deployer) internal returns (IPandaPool) {\n        bytes32 salt = keccak256(abi.encodePacked(_deployer, deployerNonce[_deployer]++));\n        return IPandaPool(Clones.cloneDeterministic(_implementation, salt));\n    }\n\n    function _checkDeploymentInputs(PandaPoolParams calldata pp, uint256 totalTokens, IPandaPool panda) internal view {\n        require(minRaise[pp.baseToken] > 0 && minTradeSize[pp.baseToken] > 0, \"PandaFactory: INVALID_BASE\");\n        require(pp.sqrtPb * PandaMath.FEE_SCALE / pp.sqrtPa >= MIN_SQRTP_MULTIPLE, \"PandaFactory: PRICES_TOO_CLOSE\");\n        require(pp.sqrtPb * PandaMath.FEE_SCALE / pp.sqrtPa <= MAX_SQRTP_MULTIPLE, \"PandaFactory: PRICES_TOO_FAR\");\n        require(pp.sqrtPa > 0, \"PandaFactory: INVALID_PRICE\");\n\n        uint256 tokensInPool = panda.getTokensInPool(pp.sqrtPa, pp.sqrtPb, totalTokens, poolFees.graduationFee);\n        require(tokensInPool <= totalTokens, \"PandaFactory: INVALID_TOKENSINPOOL\");\n        uint256 tokensInPoolShare = tokensInPool * PandaMath.FEE_SCALE / totalTokens;\n        require(tokensInPoolShare >= MIN_TOKENSINPOOL_SHARE && tokensInPoolShare <= MAX_TOKENSINPOOL_SHARE, \"PandaFactory: INVALID_TOKENSINPOOL\");\n\n        uint256 totalRaised = panda.getTotalRaise(pp.sqrtPa, pp.sqrtPb, tokensInPool);\n        require(totalRaised >= minRaise[pp.baseToken], \"PandaFactory: RAISE_TOO_LOW\");\n    }\n\n    //Claim incentives after pool graduation\n    //Anyone can call, but only once per pool. Incentive is paid to deployer as configured during deployment\n    //Incentive is subject to availability (if contract balance is empty, no incentive can be claimed)\n    function claimIncentive(address _pandaPool) external override nonReentrant {\n        require(isLegitPool(_pandaPool), \"PandaFactory: Invalid pool\");\n        require(poolToIncentiveClaimed[_pandaPool] == false, \"PandaFactory: Incentive already claimed\");\n        require(IPandaPool(_pandaPool).canClaimIncentive(), \"PandaFactory: Pool not graduated\");\n        poolToIncentiveClaimed[_pandaPool] = true;\n        TransferHelper.safeTransfer(incentiveToken, IPandaPool(_pandaPool).deployer(), incentiveAmount);\n        emit IncentiveClaimed(_pandaPool, incentiveAmount);\n    }\n\n    //*********************** VIEW FUNCTIONS *************************************************\n    //Predict the address of the PandaPool / PandaToken before it is deployed\n    function predictPoolAddress(address implementation, address deployer) external override view returns (address) {\n        bytes32 salt = keccak256(abi.encodePacked(deployer, deployerNonce[deployer]));\n        return Clones.predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    //Helper to get sqrtP in the correct scale\n    function getSqrtP(uint256 scaledPrice) external pure override returns (uint256) {\n        return PandaMath.getSqrtP(scaledPrice);\n    }\n\n    //Get fee config\n    function getPoolFees() external view override returns (PandaFees memory) {\n        return poolFees;\n    }\n\n    //Return if a PandaPool / PandaToken address is legitimately deployed through this factory\n    function isLegitPool(address _pandaPool) public view override returns (bool) {\n        return poolToImplementation[_pandaPool] != address(0);\n    }\n\n    function allPoolsLength() external view override returns (uint) {\n        return allPools.length;\n    }\n\n    function allowedImplementationsLength() external view returns (uint) {\n        return allowedImplementations.length;\n    }\n\n    //*********************** OWNERONLY CONFIGURATIONS ****************************************\n    //Set the minimum amount of baseTokens that need to be raised in a PandaPool (to avoid de-minimus pools)\n    function setMinRaise(address baseToken, uint256 _minRaise) external override onlyOwner {\n        require(baseToken != address(0), \"PandaFactory: Invalid token address\");\n        require(_minRaise > 0, \"PandaFactory: Invalid minRaise\");\n        minRaise[baseToken] = _minRaise;\n        emit MinRaiseSet(baseToken, _minRaise);\n    }\n\n    //Set the minimum swap size in PandaPool (to avoid dust trades that can cause precision issues in the math)\n    function setMinTradeSize(address _baseToken, uint256 _minTradeSize) external override onlyOwner {\n        require(_baseToken != address(0), \"PandaFactory: Invalid token address\");\n        require(_minTradeSize > 0, \"PandaFactory: Invalid minTradeSize\");\n        minTradeSize[_baseToken] = _minTradeSize;\n        emit MinTradeSizeSet(_baseToken, _minTradeSize);\n    }\n\n    //Set the fee recipient address\n    function setTreasury(address _treasury) external override onlyOwner {\n        require(_treasury != address(0), \"PandaFactory: Invalid treasury\");\n        treasury = _treasury;\n        emit TreasurySet(_treasury);\n    }\n\n    ///@param _factory: UniswapV2 style dex factory address\n    ///@param _initCodeHash: Init code hash of dex, needed to calculate pair addresses\n    function setDexFactory(address _factory, bytes32 _initCodeHash) external override onlyOwner {\n        require(_factory != address(0), \"PandaFactory: Invalid factory\");\n        dexFactory = _factory;\n        initCodeHash = _initCodeHash;\n        emit FactorySet(_factory, _initCodeHash);\n    }\n\n    //Whitelist a PandaPool implementation to be allowed to be deployed by the factory\n    function setAllowedImplementation(address _implementation, bool _allowed) external override onlyOwner {\n        require(isImplementationAllowed[_implementation] != _allowed, \"PandaFactory: No change needed\");\n        isImplementationAllowed[_implementation] = _allowed;\n        if(_allowed) {\n            allowedImplementations.push(_implementation);\n        } else {\n            uint256 length = allowedImplementations.length;\n            for(uint256 i = 0; i < length; ++i) {\n                if(allowedImplementations[i] == _implementation) {\n                    allowedImplementations[i] = allowedImplementations[length - 1];\n                    allowedImplementations.pop();\n                    break;\n                }\n            }\n        }\n        emit AllowedImplementationSet(_implementation, _allowed);\n    }\n\n    //Set the wbera address. Must be set to enable native BERA swaps\n    function setWbera(address _wbera) external override onlyOwner {\n        require(_wbera != address(0));\n        wbera = _wbera;\n        emit WberaSet(_wbera);\n    }\n\n    //Set incentive to be paid to deployer after pool graduation.\n    //Incentive tokens to be distributed must be held by this contract\n    function setIncentive(address _incentiveToken, uint256 _incentiveAmount) external override onlyOwner {\n        require(address(_incentiveToken) != address(0) || _incentiveAmount == 0, \"Invalid incentive token\");\n        incentiveToken = _incentiveToken;\n        incentiveAmount = _incentiveAmount;\n        emit IncentiveSet(_incentiveToken, _incentiveAmount);\n    }\n\n    //Set fees\n    ///param: _buyFee: buyFee in bps. Taken in baseToken terms\n    ///param: _sellFee: sellFee in bps. Taken in baseToken terms\n    ///param: _graduationFee: graduationFee in bps. Share of total baseToken raised that is taken as fee (remainder is added to LP)\n    ///param: _deployerFeeShare: Share of graduationFee that is shared with deployer\n    function setPandaPoolFees(uint16 _buyFee, uint16 _sellFee, uint16 _graduationFee, uint16 _deployerFeeShare) external override onlyOwner {\n        require(_buyFee <= PandaMath.MAX_FEE, \"PandaFactory: Invalid buy fee\");\n        require(_sellFee <= PandaMath.MAX_FEE, \"PandaFactory: Invalid sell fee\");\n        require(_graduationFee <= PandaMath.MAX_FEE, \"PandaFactory: Invalid graduation fee\");\n        require(_deployerFeeShare <= PandaMath.MAX_DEPLOYER_FEE_SHARE, \"PandaFactory: Invalid deployer fee share\");\n\n        poolFees = PandaFees(_buyFee, _sellFee, _graduationFee, _deployerFeeShare);\n\n        emit PandaPoolFeesSet(_buyFee, _sellFee, _graduationFee, _deployerFeeShare);\n    }\n\n\n    event PandaDeployed(address indexed pandaPool, address indexed implementation);\n    event IncentiveSet(address indexed token, uint256 amount);\n    event FactorySet(address indexed factory, bytes32 initCodeHash);\n    event WberaSet(address indexed wbera);\n    event TreasurySet(address indexed treasury);\n    event PandaPoolFeesSet(uint16 buyFee, uint16 sellFee, uint16 graduationFee, uint16 deployerFeeShare);\n    event MinRaiseSet(address indexed baseToken, uint256 minEndPrice);\n    event MinTradeSizeSet(address indexed baseToken, uint256 minTradeSize);\n    event AllowedImplementationSet(address indexed implementation, bool allowed);\n    event IncentiveClaimed(address indexed pandaPool, uint256 amount);\n}"
    },
    "src/interfaces/IPandaPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\nimport {IPandaStructs} from \"./IPandaStructs.sol\";\n\ninterface IPandaPool is IPandaStructs {\n    function GRADUATION_THRESHOLD() external view returns(uint256);\n\n    function pandaToken() external view returns (address);\n    function baseToken() external view returns (address);\n    function treasury() external view returns (address);\n    function deployer() external view returns (address);\n    function minTradeSize() external view returns (uint256);\n    function vestingPeriod() external view returns (uint256);\n    function poolFees() external view returns (PandaFees memory);\n    function isBeraPair() external view returns (bool);\n\n    function liquidity() external view returns (uint256);\n    function sqrtPa() external view returns (uint256);\n    function sqrtPb() external view returns (uint256);\n    function sqrtP() external view returns (uint256);\n    function pandaReserve() external view returns (uint256);\n    function baseReserve() external view returns (uint256);\n    function tokensInPool() external view returns (uint256);\n    function totalRaiseWithFees() external view returns (uint256);\n    function getCurrentPrice() external view returns (uint256);\n    function remainingTokensInPool() external view returns (uint256);\n    function tokensForLp() external view returns (uint256);\n\n    function totalBalanceOf(address user) external view returns (uint256);\n    function vestedBalanceOf(address user) external view returns (uint256);\n    function claimableTokens(address user) external view returns (uint256);\n\n    function getTokensInPool(uint256 sqrtPa, uint256 sqrtPb, uint256 totalTokens, uint16 graduationFee) external view returns (uint256);\n    function getTotalRaise(uint256 sqrtPa, uint256 sqrtPb, uint256 tokensInPool) external view returns (uint256);\n    function getTotalRaise() external view returns (uint256);\n\n    function tokensBoughtInPool(address user) external view returns (uint256);\n    function tokensClaimed(address user) external view returns (uint256);\n\n    function claimTokens(address user) external returns (uint256);\n    function moveLiquidity() external;\n    function collectExcessTokens() external;\n    function viewExcessTokens() external view returns (uint256 excessPandaTokens, uint256 excessBaseTokens);\n\n    function getAmountInBuyRemainingTokens() external view returns (uint256 amountIn);\n    function getAmountInSell(uint256 amountOut) external returns (uint256 amountIn, uint256 fee, uint256 sqrtP_new);\n    function getAmountInBuy(uint256 amountOut) external view returns (uint256 amountIn, uint256 fee, uint256 sqrtP_new);\n    function getAmountOutSell(uint256 amountIn) external view returns (uint256 amountOut, uint256 fee, uint256 sqrtP_new);\n    function getAmountOutBuy(uint256 amountIn) external view returns (uint256 amountOut, uint256 fee, uint256 sqrtP_new);\n    function graduated() external view returns (bool);\n    function graduationTime() external view returns (uint256);\n    function canClaimIncentive() external view returns (bool);\n\n    function sellTokens(uint256 amountIn, uint256 minAmountOut, address to) external returns (uint256 amountOut, uint256 fee);\n    function sellTokens(uint256 amountIn, uint256 minAmountOut, address from, address to) external returns (uint256 amountOut, uint256 fee);\n    function sellTokensForBera(uint256 amountIn, uint256 minAmountOut, address to) external returns (uint256 amountOut, uint256 fee);\n    function buyTokens(uint256 amountIn, uint256 minAmountOut, address to) external returns (uint256 amountOut, uint256 fee);\n    function buyTokens(uint256 amountIn, uint256 minAmountOut, address from, address to) external returns (uint256 amountOut, uint256 fee);\n    function buyTokensWithBera(uint256 minAmountOut, address to) external payable returns (uint256 amountOut, uint256 fee);\n\n    function initializeIncentives(address _incentiveToken, uint256 _incentiveAmount, address _incentiveContract) external;\n    function transferDeployerIncentive() external;\n\n    function VERSION() external pure returns (string memory);\n    function isPandaToken() external pure returns (bool);\n    function getByteCode() external pure returns (bytes memory);\n\n    function initializePool(\n        address _pandaToken,\n        PandaPoolParams calldata _pp,\n        uint256 _totalTokens,\n        address _deployer,\n        bytes calldata _data\n    ) external;\n    event Sync(uint256 pandaReserve, uint256 baseReserve, uint256 sqrtPrice);\n    event FeesCollected(uint256 baseTokenAmount);\n    event TokensBought(address indexed buyer, uint256 amountIn, uint256 amountOut);\n    event TokensSold(address indexed seller, uint256 amountIn, uint256 amountOut);\n    event ExcessCollected(uint256 excessPandaTokens, uint256 excessBaseTokens);\n    event LiquidityMoved(uint256 amountPanda, uint256 amountBase);\n    event PoolInitialized(\n        address pandaToken,\n        address baseToken,\n        uint256 sqrtPa,\n        uint256 sqrtPb,\n        uint256 tokensInPool,\n        PandaFees poolFees,\n        address deployer\n    );\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\n\n}"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/interfaces/IPandaFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\n\nimport {IPandaStructs} from \"./IPandaStructs.sol\";\n\ninterface IPandaFactory is IPandaStructs {\n\n    function treasury() external view returns (address);\n    function wbera() external view returns (address);\n    function minRaise(address) external view returns (uint256);\n    function minTradeSize(address) external view returns (uint256);\n\n    function MIN_TOKENSINPOOL_SHARE() external view returns (uint256);\n    function MAX_TOKENSINPOOL_SHARE() external view returns (uint256);\n    function MIN_SQRTP_MULTIPLE() external view returns (uint256);\n    function MAX_SQRTP_MULTIPLE() external view returns (uint256);\n\n    function TOKEN_SUPPLY() external view returns (uint256);\n    function DEPLOYER_MAX_BPS() external view returns (uint16);\n\n    function dexFactory() external view returns (address);\n    function initCodeHash() external view returns (bytes32);\n\n    function isImplementationAllowed(address _implementation) external view returns (bool);\n    function allowedImplementations(uint256 index) external view returns (address);\n\n    function incentiveToken() external view returns (address);\n    function incentiveAmount() external view returns (uint256);\n\n    function poolToIncentiveClaimed(address) external view returns (bool);\n    function deployerNonce(address) external view returns (uint256);\n\n    function allPools(uint256 index) external view returns (address);\n    function poolToImplementation(address) external view returns (address);\n\n\n    function deployPandaToken(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        string calldata name,\n        string calldata symbol,\n        uint16 deployerSupplyBps\n    ) external returns (address);\n\n    function deployPandaTokenWithBera(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        string calldata name,\n        string calldata symbol,\n        uint16 deployerSupplyBps\n    ) external payable returns (address);\n\n    function deployPandaPool(\n        address implementation,\n        IPandaFactory.PandaPoolParams calldata pp,  //baseToken, sqrtPa, sqrtPb, vestingPeriod\n        uint256 totalTokens,\n        address pandaToken,\n        bytes calldata data\n    ) external returns (address);\n\n    function claimIncentive(address _pandaPool) external;\n\n    function predictPoolAddress(address _implementation, address _deployer) external view returns (address);\n    function getSqrtP(uint256 scaledPrice) external view returns (uint256);\n    function getPoolFees() external view returns (PandaFees memory);\n    function isLegitPool(address _pandaPool) external view returns (bool);\n    function allPoolsLength() external view returns (uint256);\n    function allowedImplementationsLength() external view returns (uint256);\n\n    function setMinRaise(address _token, uint256 _minRaise) external;\n    function setMinTradeSize(address _token, uint256 _minTradeSize) external;\n    function setTreasury(address _treasury) external;\n    function setPandaPoolFees(uint16 _buyFee, uint16 _sellFee, uint16 _graduationFee, uint16 _deployerFeeShare) external;\n    function setDexFactory(address _dexFactory, bytes32 _initCodeHash) external;\n    function setAllowedImplementation(address _implementation, bool _allowed) external;\n    function setWbera(address _wbera) external;\n    function setIncentive(address _incentiveToken, uint256 _incentiveAmount) external;\n\n\n\n\n\n\n}"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "src/libraries/PandaMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n\nlibrary PandaMath {\n    using Math for uint256;\n\n    uint256 internal constant PRICE_SCALE = 1e36;\n    uint256 internal constant FEE_SCALE = 10000;\n\n    uint256 internal constant MAX_FEE = 1000;\n    uint256 internal constant MAX_DEPLOYER_FEE_SHARE = 1000;\n\n    //Helper function to get the sqrtP of the token, given scaledPrice = baseAmount * PRICE_SCALE / pandaAmount\n    ///@param scaledPrice: price of the token specified as baseToken per 1e36 (PRICE_SCALE) pandaToken\n    ///@dev For example, to get sqrtP associated with a price of 0.00001, pass in 0.00001 * 1e18 here\n    function getSqrtP(uint256 scaledPrice) internal pure returns (uint256) {\n        return Math.sqrt(scaledPrice);\n    }\n\n    //Get tokens in pool\n    //Calculated deterministically based on:\n    //totalAmountRaised / tokensForLp (i.e. the price when we move to the dex) == sqrtPb **2 (i.e. the ending price)\n    //Calculated:\n    //uint raiseAmount = tokensInPool*sqrtPa*sqrtPb/PRICE_SCALE;\n    //uint raiseAmountWithFee = raiseAmount - raiseAmount * graduationFee / FEE_SCALE;\n    //uint dexPrice = raiseAmountWithFee * PRICE_SCALE / (totalTokens - tokensInPool);\n    //Solve for tokensInPool such that dexPrice == sqrtPb**2;\n    function getTokensInPool(uint256 sqrtPa, uint256 sqrtPb, uint256 totalTokens, uint16 graduationFee) internal pure returns (uint256) {\n        uint256 denom = sqrtPa + sqrtPb - sqrtPa * graduationFee / FEE_SCALE;\n        return totalTokens.mulDiv(sqrtPb, denom, Math.Rounding.Up);\n    }\n\n    //Helper function to get the total amount of base tokens needed to graduate the pool, given pool parameters\n    function getTotalRaise(uint256 sqrtPa, uint256 sqrtPb, uint256 tokensInPool) internal pure returns (uint256) {\n        return tokensInPool.mulDiv(sqrtPa * sqrtPb, PRICE_SCALE, Math.Rounding.Up);\n    }\n\n    //Calculate the V2 dex pair address for the token, based on the information in the factory\n    function getDexPair(address pandaToken, address baseToken, address v2Factory, bytes32 initCodeHash) internal pure returns (address pair) {\n        require(baseToken != pandaToken, 'PandaFactory: IDENTICAL_ADDRESSES');\n        require(baseToken != address(0) && pandaToken != address(0), 'PandaFactory: ZERO_ADDRESS');\n        (address token0, address token1) = baseToken < pandaToken ? (baseToken, pandaToken) : (pandaToken, baseToken);\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\n            hex'ff',\n            v2Factory,\n            keccak256(abi.encodePacked(token0, token1)),\n            initCodeHash\n        )))));\n    }\n\n\n    //MATH for PandaPool.sol\n    //TODO: migrate it here with helper functions\n    //In general, we follow UniV3 style math\n\n    //LIQUIDITY:\n    //Source: https://atiselsts.github.io/pdfs/uniswap-v3-liquidity-math.pdf\n    //See Page 2, Equation (5): case where P <= Pa (i.e. Price = startingPrice, as is the case when pool is started)\n    // L = x * (sqrt(Pa) - sqrt(Pb)) / (sqrt(Pb) - sqrt(Pa))\n    // In our case, x = tokensForLp, sqrt(Pa) = sqrtPa, sqrt(Pb) = sqrtPb\n    // L = tokensForLp * (sqrtPa - sqrtPb) / (sqrtPb - sqrtPa)\n    // In solidity: liquidity = tokensInPool.mulDiv(sqrtPa * sqrtPb, sqrtPb - sqrtPa, Math.Rounding.Down);\n    // Rounding up vs down doesn't matter here, chosen down to be explicit.\n    // This is a constant and calculated once upon initialization.\n\n    // Now we can deterministically calculate:\n    // - Given PandaReserve: corresponding baseReserve, and price (sqrtP)\n    // - Given BaseReserve: corresponding pandaReserve, and price (sqrtP)\n\n    // PandaPool also follows the following property:\n    // The average price paid to buy all the tokens in a PandaPool = GEOMEAN(Pa, Pb) = sqrtPa * sqrtPb\n\n    //CALCULATING NEW PRICE:\n    //Given pandaReserve_new\n    //sqrtP_new = liquidity * sqrtPb / (pandaReserve_new * sqrtPb + liquidity)\n\n    //Derivation:\n    //Source: https://atiselsts.github.io/pdfs/uniswap-v3-liquidity-math.pdf.\n    //Start with Page 3, Equation 11:\n    //x = L * (sqrtPb - sqrtP) / (sqrtP * sqrtPb)\n    //x * sqrtPb * sqrtP = L * sqrtPb - L * sqrtP\n    //x * sqrtPb * sqrtP + L * sqrtP = L * sqrtPb\n    //sqrtP * (x * sqrtPb + L) = L * sqrtPb\n    //sqrtP = L * sqrtPb / (x * sqrtPb + L)\n\n    //Given baseReserve_new\n    //sqrtP_new = sqrtPa + baseReserve_new * PRICE_SCALE / liquidity\n    //Derivation:\n    //Source: https://atiselsts.github.io/pdfs/uniswap-v3-liquidity-math.pdf.\n    //Start with Page 3, Equation 12:\n    //y = L * (sqrtP - sqrtPa)\n    //y = L*sqrtP - L*sqrtPa\n    //y + L*sqrtPa = L*sqrtP\n    //sqrtP = (y + L*sqrtPa) / L\n    //sqrtP = y/L + sqrtPa\n    //Note: we need to adjust by the PRICE_SCALE\n\n    //ROUNDING:\n    //In general we use OZ muldiv to avoid risk of overflow\n    //When we calculate new price, round up when buying, round down when selling\n    //When we calculate new reserves, always round up (in favor of the liquidity pool)\n}\n"
    },
    "src/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\n/// @dev Forked from Uniswap solidity-lib + added condition to skip 0 value transfers\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        if (value == 0) return;\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        if (value == 0) return;\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        if (value == 0) return;\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}"
    },
    "lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "src/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "src/interfaces/IPandaStructs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.19;\n\ninterface IPandaStructs {\n    struct PandaFees {\n        uint16 buyFee;\n        uint16 sellFee;\n        uint16 graduationFee;\n        uint16 deployerFeeShare;\n    }\n\n    struct PandaPoolParams {\n        address baseToken;\n        uint256 sqrtPa;\n        uint256 sqrtPb;\n        uint256 vestingPeriod;\n    }\n\n}"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/contracts/",
      "solady/=lib/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}