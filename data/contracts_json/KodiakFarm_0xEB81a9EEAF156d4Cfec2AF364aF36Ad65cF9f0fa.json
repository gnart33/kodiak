{
  "language": "Solidity",
  "sources": {
    "src/farms/KodiakFarm.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.19;\n\n// *********************************************************************************************************\n// @title Modified StakingRewards from Frax/Synthetix for Kodiak\n// @author berastotle\n// @notice Allows users to stake ERC20 tokens and earn token rewards, with a multiplier based on lock duration\n// @dev    Modifications:\n// Emergency withdrawal by user is possible if token rewards run out\n// Ability to add new reward tokens after contract is deployed\n// Ability to configure caps to the total stake in the farm\n// Auto-set rewards to zero if they're not refilled by time of reward period renewal\n// Remove configuration of rewardSymbols\n// Require funding of farm before setting a rewardRate (soft check)\n// Separate roles:\n// rewardManager: can change reward rates by token,\n// owner: can change farm settings, controlled by farm deployer\n// *********************************************************************************************************\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"lib/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport {ReentrancyGuard} from \"lib/solady/src/utils/ReentrancyGuard.sol\";\nimport {IFarmFactory} from \"src/farms/interfaces/IFarmFactory.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {Multicallable} from \"lib/solady/src/utils/Multicallable.sol\";\n\ncontract KodiakFarm is Ownable, ReentrancyGuard, Multicallable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n    // Effectively immutable\n    IFarmFactory public factory;\n\n    // Instances\n    IERC20 public stakingToken;\n    uint256 public stakingTokenCap; //Configurable maximum cap, default to uncapped\n\n    // Constant for various precisions\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\n\n    // Time tracking\n    uint256 public periodFinish;\n    uint256 public lastUpdateTime;\n\n    // Lock time and multiplier settings\n    uint256 public lock_max_multiplier;\n    uint256 public lock_time_for_max_multiplier;\n    uint256 public lock_time_min;\n\n    // Reward addresses, rates, and managers\n    mapping(address => address) public rewardManagers; // token addr -> manager addr\n    address[] public rewardTokens;\n    uint256[] public rewardRates;\n    mapping(address => uint256) public rewardTokenAddrToIdx; // token addr -> token index\n\n    // Reward period\n    uint256 public rewardsDuration;\n\n    // Reward tracking\n    uint256[] private rewardsPerTokenStored;\n    mapping(address => mapping(uint256 => uint256)) private userRewardsPerTokenPaid; // staker addr -> token id -> paid amount\n    mapping(address => mapping(uint256 => uint256)) private rewards; // staker addr -> token id -> reward amount\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\n\n    // Balance tracking\n    uint256 private _total_liquidity_locked;\n    uint256 private _total_combined_weight;\n    mapping(address => uint256) private _locked_liquidity;\n    mapping(address => uint256) private _combined_weights;\n\n    // Stake tracking\n    mapping(address => LockedStake[]) private lockedStakes;\n\n    // Greylisting of bad addresses\n    mapping(address => bool) public greylist;\n\n    // Administrative booleans\n    bool public stakesUnlocked; // Release locked stakes in case of emergency\n    bool public rewardsCollectionPaused; // For emergencies\n    bool public stakingPaused; // For emergencies\n\n    /* ========== STRUCTS ========== */\n\n    struct LockedStake {\n        bytes32 kek_id;\n        uint256 start_timestamp;\n        uint256 liquidity;\n        uint256 ending_timestamp;\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyTknMgrs(address reward_token_address) {\n        require(msg.sender == owner() || isTokenManagerFor(msg.sender, reward_token_address), \"Farm: Not owner or tkn mgr\");\n        _;\n    }\n\n    modifier updateRewardAndBalance(address account, bool sync_too) {\n        _updateRewardAndBalance(account, sync_too);\n        _;\n    }\n\n    /* ========== INITIALIZER ========== */\n    function initialize(\n        address _owner,\n        address _stakingToken,\n        address[] memory _rewardTokens,\n        address[] memory _rewardManagers,\n        uint256[] memory _rewardRates,\n        bytes calldata /*_data*/\n    ) external nonReentrant {\n        require(address(stakingToken) == address(0), \"Farm: Already initialized\");\n        stakingToken = IERC20(_stakingToken);\n\n        factory = IFarmFactory(msg.sender);\n\n        require(_rewardTokens.length == _rewardManagers.length, \"Farm: Array lengths do not match\");\n        require(_rewardTokens.length == _rewardRates.length, \"Farm: Array lengths do not match\");\n        rewardTokens = _rewardTokens;\n        rewardRates = _rewardRates;\n\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            if (i > 0) {\n                require(rewardTokenAddrToIdx[_rewardTokens[i]] == 0 && _rewardTokens[i] != rewardTokens[0], \"Token already added\");\n            }\n            // For fast token address -> token ID lookups later\n            rewardTokenAddrToIdx[_rewardTokens[i]] = i;\n            // Initialize the stored rewards\n            rewardsPerTokenStored.push(0);\n            // Initialize the reward managers\n            rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\n        }\n\n        // Default settings, use ownerOnly setters to update\n        stakingTokenCap = type(uint256).max; //default to uncapped\n        rewardsDuration = 30 * 86400; // 30 * 86400  (30 days)\n        lock_time_min = 0;\n        lock_time_for_max_multiplier = 1 * 30 * 86400; // 30 days\n        lock_max_multiplier = uint256(3e18); // E18. 1x = e18\n\n        _transferOwnership(_owner); //Transfer ownership to deployer\n    }\n\n    //Call this to start the farm\n    function startFarm() external onlyOwner {\n        require(!_farmStarted(), \"Farm: Already started\");\n\n        uint256 _rewardsDuration = rewardsDuration;\n        address[] memory _rewardTokens = rewardTokens;\n        uint256[] memory _rewardRates = rewardRates;\n\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            uint256 fundingNeeded = rewardFundingNeeded(_rewardTokens[i], _rewardRates[i]);\n            if (fundingNeeded > 0) {\n                TransferHelper.safeTransferFrom(_rewardTokens[i], msg.sender, address(this), fundingNeeded);\n            }\n        }\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(_rewardsDuration);\n\n        emit FarmStarted();\n    }\n\n    /* ========== VIEWS ========== */\n    function _farmStarted() private view returns (bool) {\n        return lastUpdateTime != 0 && periodFinish != 0;\n    }\n\n    // Calculate how much more of the reward token needs to be funded before setting a reward rate\n    // Note this is necessary but not sufficient condition, as we get the deficit using the balance, which includes unclaimed tokens\n    function rewardFundingNeeded(address _rewardToken, uint256 _rate) public view returns (uint256) {\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\n        uint256 _rewardsDuration = rewardsDuration;\n        uint256 timeToFund;\n        if (!_farmStarted()) {\n            timeToFund = _rewardsDuration;\n        } else if (block.timestamp <= periodFinish) {\n            uint256 remainingTime = periodFinish.sub(block.timestamp);\n            timeToFund = remainingTime < rewardsDuration / 2 ? remainingTime.add(rewardsDuration) : remainingTime;\n        } else if (block.timestamp > periodFinish) {\n            uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\n            timeToFund = rewardsDuration.mul(num_periods_elapsed + 1);\n        }\n\n        uint256 amountNeeded = _rate.mul(timeToFund);\n        return balance > amountNeeded ? 0 : amountNeeded.sub(balance);\n    }\n\n    // Total locked liquidity tokens\n    function totalLiquidityLocked() external view returns (uint256) {\n        return _total_liquidity_locked;\n    }\n\n    // Locked liquidity for a given account\n    function lockedLiquidityOf(address account) external view returns (uint256) {\n        return _locked_liquidity[account];\n    }\n\n    // Total 'balance' used for calculating the percent of the pool the account owns\n    // Takes into account the locked stake time multiplier\n    function totalCombinedWeight() external view returns (uint256) {\n        return _total_combined_weight;\n    }\n\n    // Combined weight for a specific account\n    function combinedWeightOf(address account) external view returns (uint256) {\n        return _combined_weights[account];\n    }\n\n    // Calculated the combined weight for an account\n    function calcCurCombinedWeight(address account) public view returns (uint256 old_combined_weight, uint256 new_combined_weight) {\n        // Get the old combined weight\n        old_combined_weight = _combined_weights[account];\n\n        // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\n        new_combined_weight = 0;\n        for (uint256 i = 0; i < lockedStakes[account].length; i++) {\n            LockedStake memory thisStake = lockedStakes[account][i];\n            uint256 lock_multiplier = thisStake.lock_multiplier;\n\n            // Handles corner case where user never claims for a new stake\n            // Don't want the multiplier going above the max\n            uint256 accrue_start_time = Math.max(lastRewardClaimTime[account], thisStake.start_timestamp);\n\n            // If the lock is expired\n            if (thisStake.ending_timestamp <= block.timestamp) {\n                // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\n                if (lastRewardClaimTime[account] < thisStake.ending_timestamp) {\n                    uint256 time_before_expiry = (thisStake.ending_timestamp).sub(accrue_start_time);\n                    uint256 time_after_expiry = (block.timestamp).sub(thisStake.ending_timestamp);\n                    uint256 time_sum = time_before_expiry.add(time_after_expiry);\n\n                    if (time_sum == 0) {\n                        // Multiplier is 1x if lock time is 0\n                        lock_multiplier == MULTIPLIER_PRECISION;\n                    } else {\n                        // Get the weighted-average lock_multiplier\n                        uint256 numerator = ((lock_multiplier).mul(time_before_expiry)).add(((MULTIPLIER_PRECISION).mul(time_after_expiry)));\n                        lock_multiplier = numerator.div(time_sum);\n                    }\n                }\n                // Otherwise, it needs to just be 1x\n                else {\n                    lock_multiplier = MULTIPLIER_PRECISION;\n                }\n            }\n\n            // Sanity check: make sure it never goes above the initial multiplier\n            if (lock_multiplier > thisStake.lock_multiplier) lock_multiplier = thisStake.lock_multiplier;\n\n            uint256 liquidity = thisStake.liquidity;\n            uint256 combined_boosted_amount = liquidity.mul(lock_multiplier).div(MULTIPLIER_PRECISION);\n            new_combined_weight = new_combined_weight.add(combined_boosted_amount);\n        }\n    }\n\n    // All the locked stakes for a given account\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\n        return lockedStakes[account];\n    }\n\n    // All the reward token symbols (if they exist)\n    function getRewardSymbols() external view returns (string[] memory) {\n        uint256 len = rewardTokens.length;\n        string[] memory rewardSymbols = new string[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            try IERC20Metadata(rewardTokens[i]).symbol() returns (string memory symbol) {\n                rewardSymbols[i] = symbol;\n            } catch {\n                rewardSymbols[i] = \"\";\n            }\n        }\n\n        return rewardSymbols;\n    }\n\n    // All the reward tokens\n    function getAllRewardTokens() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    // All the reward rates\n    function getAllRewardRates() external view returns (uint256[] memory) {\n        return rewardRates;\n    }\n\n    // Multiplier amount, given the length of the lock\n    function lockMultiplier(uint256 secs) public view returns (uint256) {\n        uint256 lock_multiplier = uint256(MULTIPLIER_PRECISION).add(secs.mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION)).div(lock_time_for_max_multiplier));\n        if (lock_multiplier > lock_max_multiplier) lock_multiplier = lock_max_multiplier;\n        return lock_multiplier;\n    }\n\n    // Last time the reward was applicable\n    function lastTimeRewardApplicable() internal view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    // Amount of reward tokens per LP token\n    function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\n        if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\n            return rewardsPerTokenStored;\n        } else {\n            newRewardsPerTokenStored = new uint256[](rewardTokens.length);\n            for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n                newRewardsPerTokenStored[i] = rewardsPerTokenStored[i].add(lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRates[i]).mul(1e18).div(_total_combined_weight));\n            }\n            return newRewardsPerTokenStored;\n        }\n    }\n\n    // Amount of reward tokens an account has earned / accrued\n    // Note: In the edge-case of one of the account's stake expiring since the last claim, this will\n    // return a slightly inflated number\n    function earned(address account) public view returns (uint256[] memory new_earned) {\n        uint256[] memory reward_arr = rewardsPerToken();\n        new_earned = new uint256[](rewardTokens.length);\n\n        if (_combined_weights[account] == 0) {\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n                new_earned[i] = 0;\n            }\n        } else {\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n                new_earned[i] = (_combined_weights[account]).mul(reward_arr[i].sub(userRewardsPerTokenPaid[account][i])).div(1e18).add(rewards[account][i]);\n            }\n        }\n    }\n\n    // Total reward tokens emitted in the given period\n    function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\n        rewards_per_duration_arr = new uint256[](rewardRates.length);\n\n        for (uint256 i = 0; i < rewardRates.length; i++) {\n            rewards_per_duration_arr[i] = rewardRates[i].mul(rewardsDuration);\n        }\n    }\n\n    // See if the caller_addr is a manager for the reward token\n    function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool) {\n        if (caller_addr == owner()) return true; // Contract owner\n\n        else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\n        return false;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function _updateRewardAndBalance(address account, bool sync_too) internal {\n        require(_farmStarted(), \"Farm: not started yet\");\n\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\n        if (sync_too) {\n            sync();\n        }\n\n        if (account != address(0)) {\n            // To keep the math correct, the user's combined weight must be recomputed\n            (uint256 old_combined_weight, uint256 new_combined_weight) = calcCurCombinedWeight(account);\n\n            // Calculate the earnings first\n            _syncEarned(account);\n\n            // Update the user's and the global combined weights\n            if (new_combined_weight >= old_combined_weight) {\n                uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\n                _total_combined_weight = _total_combined_weight.add(weight_diff);\n                _combined_weights[account] = old_combined_weight.add(weight_diff);\n            } else {\n                uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\n                _total_combined_weight = _total_combined_weight.sub(weight_diff);\n                _combined_weights[account] = old_combined_weight.sub(weight_diff);\n            }\n        }\n    }\n\n    function _syncEarned(address account) internal {\n        if (account != address(0)) {\n            // Calculate the earnings\n            uint256[] memory earned_arr = earned(account);\n\n            // Update the rewards array\n            for (uint256 i = 0; i < earned_arr.length; i++) {\n                rewards[account][i] = earned_arr[i];\n            }\n\n            // Update the rewards paid array\n            for (uint256 i = 0; i < earned_arr.length; i++) {\n                userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\n            }\n        }\n    }\n\n    function stakeLocked(uint256 liquidity, uint256 secs) public nonReentrant {\n        _stakeLocked(msg.sender, liquidity, secs, block.timestamp);\n    }\n\n    function _stakeLocked(address user, uint256 liquidity, uint256 secs, uint256 start_timestamp) internal updateRewardAndBalance(user, true) {\n        require(!stakingPaused, \"Staking paused\");\n        require(liquidity > 0, \"Must stake more than zero\");\n        require(_total_liquidity_locked.add(liquidity) <= stakingTokenCap, \"Farm cap exceeded\");\n        require(!greylist[user], \"Address has been greylisted\");\n        require(secs >= lock_time_min, \"Minimum stake time not met\");\n        require(secs <= lock_time_for_max_multiplier, \"Trying to lock for too long\");\n\n        uint256 lock_multiplier = lockMultiplier(secs);\n        bytes32 kek_id = keccak256(abi.encodePacked(user, start_timestamp, liquidity, _locked_liquidity[user]));\n        lockedStakes[user].push(LockedStake(kek_id, start_timestamp, liquidity, start_timestamp.add(secs), lock_multiplier));\n\n        // Pull tokens from the user\n        TransferHelper.safeTransferFrom(address(stakingToken), user, address(this), liquidity);\n\n        // Update liquidities\n        _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\n        _locked_liquidity[user] = _locked_liquidity[user].add(liquidity);\n\n        // Need to call to update the combined weights\n        _updateRewardAndBalance(user, false);\n\n        // Needed for edge case if the staker only claims once, and after the lock expired\n        if (lastRewardClaimTime[user] == 0) lastRewardClaimTime[user] = block.timestamp;\n\n        emit StakeLocked(user, liquidity, secs, kek_id);\n    }\n\n    // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues\n    function withdrawLocked(bytes32 kek_id) public nonReentrant {\n        _withdrawLocked(msg.sender, kek_id, true);\n    }\n\n    function withdrawLockedMultiple(bytes32[] memory kek_ids) public nonReentrant {\n        _getReward(msg.sender);\n        for (uint256 i = 0; i < kek_ids.length; i++) {\n            _withdrawLocked(msg.sender, kek_ids[i], false); //don't collect rewards each iteration\n        }\n    }\n\n    function withdrawLockedAll() public nonReentrant {\n        _getReward(msg.sender);\n        LockedStake[] memory locks = lockedStakes[msg.sender];\n        for (uint256 i = 0; i < locks.length; i++) {\n            if (locks[i].liquidity > 0 && block.timestamp >= locks[i].ending_timestamp) {\n                _withdrawLocked(msg.sender, locks[i].kek_id, false);\n            }\n        }\n    }\n\n    //Emergency withdraw forgoes rewards\n    function emergencyWithdraw(bytes32 kek_id) public nonReentrant {\n        _withdrawLocked(msg.sender, kek_id, false);\n    }\n\n    function _withdrawLocked(address user, bytes32 kek_id, bool collectRewards) internal {\n        // Collect rewards first and then update the balances\n        if (collectRewards) {\n            _getReward(user);\n        }\n\n        LockedStake memory thisStake;\n        thisStake.liquidity = 0;\n        uint256 theArrayIndex;\n        uint256 stakesLength = lockedStakes[user].length;\n\n        for (uint256 i = 0; i < stakesLength; i++) {\n            if (kek_id == lockedStakes[user][i].kek_id) {\n                thisStake = lockedStakes[user][i];\n                theArrayIndex = i;\n                break;\n            }\n        }\n        require(thisStake.kek_id == kek_id, \"Stake not found\");\n        require(block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true, \"Stake is still locked!\");\n\n        uint256 liquidity = thisStake.liquidity;\n\n        if (liquidity > 0) {\n            // Update liquidities\n            _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\n            _locked_liquidity[user] = _locked_liquidity[user].sub(liquidity);\n\n            // Remove the stake from the array\n            // Step 1: If it's not the last element, copy the last element to the index where you want to remove an element\n            if (theArrayIndex < stakesLength - 1) {\n                lockedStakes[user][theArrayIndex] = lockedStakes[user][stakesLength - 1];\n            }\n\n            // Step 2: Remove the last element (pop the array)\n            lockedStakes[user].pop();\n\n            // Need to call to update the combined weights\n            _updateRewardAndBalance(user, false);\n\n            // Give the tokens to the destination_address\n            // Should throw if insufficient balance\n            TransferHelper.safeTransfer(address(stakingToken), user, liquidity);\n\n            emit WithdrawLocked(user, liquidity, kek_id);\n        }\n    }\n\n    // Two different getReward functions are needed because of delegateCall and msg.sender issues\n    function getReward() external nonReentrant returns (uint256[] memory) {\n        require(!rewardsCollectionPaused, \"Rewards collection paused\");\n        return _getReward(msg.sender);\n    }\n\n    // No withdrawer == msg.sender check needed since this is only internally callable\n    function _getReward(address user) internal updateRewardAndBalance(user, true) returns (uint256[] memory rewards_before) {\n        require(!rewardsCollectionPaused, \"Farm: Rewards emergency paused, use emergencyWithdraw if necessary\");\n\n        // Update the rewards array and distribute rewards\n        rewards_before = new uint256[](rewardTokens.length);\n\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            rewards_before[i] = rewards[user][i];\n            if (rewards_before[i] > 0) {\n                rewards[user][i] = 0;\n                TransferHelper.safeTransfer(rewardTokens[i], user, rewards_before[i]);\n                emit RewardPaid(user, rewards_before[i], rewardTokens[i]);\n            }\n        }\n\n        lastRewardClaimTime[user] = block.timestamp;\n    }\n\n    // If the period expired, renew it\n    function _retroCatchUp() internal {\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\n\n        // Make sure there are enough tokens to renew the reward period\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            bool haveTokensToRenew = rewardRates[i].mul(rewardsDuration).mul(num_periods_elapsed + 1) <= IERC20(rewardTokens[i]).balanceOf(address(this));\n            if (!haveTokensToRenew) {\n                // if there aren't enough tokens to renew the reward period, zero out the rewardRate\n                rewardRates[i] = 0;\n                emit RewardRateUpdated(rewardTokens[i], 0);\n            }\n        }\n\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\n\n        _updateStoredRewardsAndTime();\n\n        emit RewardsPeriodRenewed(address(stakingToken));\n    }\n\n    function _updateStoredRewardsAndTime() internal {\n        // Get the rewards\n        uint256[] memory rewards_per_token = rewardsPerToken();\n\n        // Update the rewardsPerTokenStored\n        for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n            rewardsPerTokenStored[i] = rewards_per_token[i];\n        }\n\n        // Update the last stored time\n        lastUpdateTime = lastTimeRewardApplicable();\n    }\n\n    function sync() public {\n        require(_farmStarted(), \"Farm: not started yet\");\n        if (block.timestamp >= periodFinish) {\n            _retroCatchUp();\n        } else {\n            _updateStoredRewardsAndTime();\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyTknMgrs(tokenAddress) {\n        // Cannot rug the staking / LP tokens\n        require(tokenAddress != address(stakingToken), \"Cannot rug staking / LP tokens\");\n\n        // Check if the desired token is a reward token\n        bool isRewardToken = false;\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            if (rewardTokens[i] == tokenAddress) {\n                isRewardToken = true;\n                break;\n            }\n        }\n\n        // Only the reward managers can take back their reward tokens\n        // Note: this resets rewardRate to zero, must set using setRewardRate\n        if (isRewardToken && rewardManagers[tokenAddress] == msg.sender) {\n            rewardRates[rewardTokenAddrToIdx[tokenAddress]] = 0;\n            TransferHelper.safeTransfer(tokenAddress, msg.sender, tokenAmount);\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\n            emit RewardRateUpdated(tokenAddress, 0);\n            return;\n        }\n        // Other tokens, like airdrops or accidental deposits, can be withdrawn by the owner\n        else if (!isRewardToken && (msg.sender == owner())) {\n            TransferHelper.safeTransfer(tokenAddress, msg.sender, tokenAmount);\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\n            return;\n        }\n        // If none of the above conditions are true\n        else {\n            revert(\"No valid tokens to recover\");\n        }\n    }\n\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        require(_rewardsDuration >= 86400, \"Rewards duration too short\");\n        require(periodFinish == 0 || block.timestamp > periodFinish, \"Reward period incomplete\");\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    function setMultipliers(uint256 _lock_max_multiplier) external onlyOwner {\n        require(_lock_max_multiplier >= uint256(1e18), \"Multiplier must be greater than or equal to 1e18\");\n        lock_max_multiplier = _lock_max_multiplier;\n        emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\n    }\n\n    function setLockedStakeTimeForMinAndMaxMultiplier(uint256 _lock_time_for_max_multiplier, uint256 _lock_time_min) external onlyOwner {\n        require(_lock_time_for_max_multiplier >= 1, \"Mul max time must be >= 1\");\n        require(_lock_time_for_max_multiplier >= _lock_time_min, \"Mul max time must be >= min time\");\n\n        lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\n        lock_time_min = _lock_time_min;\n\n        emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\n        emit LockedStakeMinTime(_lock_time_min);\n    }\n\n    function setGreylist(address _address, bool _status) external onlyOwner {\n        greylist[_address] = _status;\n        emit GreylistSet(_address, _status);\n    }\n\n    function setStakesUnlocked(bool _status) external onlyOwner {\n        stakesUnlocked = _status;\n        emit StakesUnlockedSet(_status);\n    }\n\n    function setStakingPaused(bool _status) external onlyOwner {\n        stakingPaused = _status;\n        emit StakingPausedSet(_status);\n    }\n\n    function setRewardsCollectionPaused(bool _status) external onlyOwner {\n        rewardsCollectionPaused = _status;\n        emit RewardsCollectionPausedSet(_status);\n    }\n\n    // The owner or the reward token managers can set reward rates\n    function setRewardRate(address _rewardToken, uint256 _rewardRate, bool sync_too) external onlyTknMgrs(_rewardToken) {\n        uint256 i = rewardTokenAddrToIdx[_rewardToken];\n        uint256 old_rate = rewardRates[i];\n        if (_rewardRate > old_rate && _farmStarted()) {\n            uint256 fundingNeeded = rewardFundingNeeded(_rewardToken, _rewardRate);\n            if (fundingNeeded > 0) {\n                TransferHelper.safeTransferFrom(_rewardToken, msg.sender, address(this), fundingNeeded);\n            }\n        }\n\n        rewardRates[i] = _rewardRate;\n\n        if (sync_too) {\n            sync();\n        }\n\n        emit RewardRateUpdated(_rewardToken, _rewardRate);\n    }\n\n    // The owner or the reward token managers can change managers\n    function changeTokenManager(address reward_token_address, address new_manager_address) external onlyTknMgrs(reward_token_address) {\n        rewardManagers[reward_token_address] = new_manager_address;\n        emit RewardManagerSet(reward_token_address, new_manager_address);\n    }\n\n    function addNewRewardToken(address _rewardToken, address _rewardManager, uint256 _rewardRate) external onlyOwner {\n        require(_rewardToken != address(0), \"Zero address detected\");\n        require(rewardTokenAddrToIdx[_rewardToken] == 0 && _rewardToken != rewardTokens[0], \"Token already added\");\n\n        if (_farmStarted()) {\n            sync();\n            uint256 fundingNeeded = rewardFundingNeeded(_rewardToken, _rewardRate);\n            if (fundingNeeded > 0) {\n                TransferHelper.safeTransferFrom(_rewardToken, msg.sender, address(this), fundingNeeded);\n            }\n        }\n\n        rewardTokens.push(_rewardToken);\n        rewardRates.push(_rewardRate);\n\n        rewardTokenAddrToIdx[_rewardToken] = rewardTokens.length - 1;\n        rewardsPerTokenStored.push(0);\n        rewardManagers[_rewardToken] = _rewardManager;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function setStakingTokenCap(uint256 _stakingTokenCap) external onlyOwner {\n        stakingTokenCap = _stakingTokenCap;\n        emit StakingTokenCapUpdated(_stakingTokenCap);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id);\n    event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id);\n    event RewardPaid(address indexed user, uint256 reward, address indexed token_address);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event RewardRateUpdated(address indexed token, uint256 newRate);\n    event RewardManagerSet(address indexed token, address newManager);\n    event Recovered(address indexed destination_address, address indexed token, uint256 amount);\n    event RewardsPeriodRenewed(address indexed token);\n    event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\n    event LockedStakeTimeForMaxMultiplier(uint256 secs);\n    event LockedStakeMinTime(uint256 secs);\n    event RewardTokenAdded(address rewardToken);\n    event StakingTokenCapUpdated(uint256 stakingTokenCap);\n    event StakingPausedSet(bool _status);\n    event RewardsCollectionPausedSet(bool _status);\n    event StakesUnlockedSet(bool _status);\n    event GreylistSet(address indexed _address, bool _status);\n    event FarmStarted();\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // ? `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // ? `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "lib/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "lib/solady/src/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Reentrancy guard mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u00b0.*\u00b0.\u00b0:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u00b0\u00b0.*\u00b0.\u00b0:*.\u00b4+\u00b0.\u2022*/\n\n    /// @dev Unauthorized reentrant call.\n    error Reentrancy();\n\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\n    /*                          STORAGE                           */\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u00b0.*\u00b0.\u00b0:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u00b0\u00b0.*\u00b0.\u00b0:*.\u00b4+\u00b0.\u2022*/\n\n    /// @dev Equivalent to: `uint72(bytes9(keccak256(\"_REENTRANCY_GUARD_SLOT\")))`.\n    /// 9 bytes is large enough to avoid collisions with lower slots,\n    /// but not too large to result in excessive bytecode bloat.\n    uint256 private constant _REENTRANCY_GUARD_SLOT = 0x929eee149b4bd21268;\n\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u00b0.\u00b0*.\u00b0\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\n    /*                      REENTRANCY GUARD                      */\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u00b0.*\u00b0.\u00b0:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u00b0\u00b0.*\u00b0.\u00b0:*.\u00b4+\u00b0.\u2022*/\n\n    /// @dev Guards a function from reentrancy.\n    modifier nonReentrant() virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\n                revert(0x1c, 0x04)\n            }\n            sstore(_REENTRANCY_GUARD_SLOT, address())\n        }\n        _;\n        /// @solidity memory-safe-assembly\n        assembly {\n            sstore(_REENTRANCY_GUARD_SLOT, codesize())\n        }\n    }\n\n    /// @dev Guards a view function from read-only reentrancy.\n    modifier nonReadReentrant() virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _;\n    }\n}\n"
    },
    "src/farms/interfaces/IFarmFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\ninterface IFarmFactory {\n\n    function owner() external view returns (address);\n}"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/solady/src/utils/Multicallable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Contract that enables a single call to call multiple methods on itself.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Multicallable.sol)\n///\n/// WARNING:\n/// This implementation is NOT to be used with ERC2771 out-of-the-box.\n/// https://blog.openzeppelin.com/arbitrary-address-spoofing-vulnerability-erc2771context-multicall-public-disclosure\n/// This also applies to potentially other ERCs / patterns appending to the back of calldata.\n///\n/// We do NOT have a check for ERC2771, as we do not inherit from OpenZeppelin's context.\n/// Moreover, it is infeasible and inefficient for us to add checks and mitigations\n/// for all possible ERC / patterns appending to the back of calldata.\n///\n/// We would highly recommend using an alternative pattern such as\n/// https://github.com/Vectorized/multicaller\n/// which is more flexible, futureproof, and safer by default.\nabstract contract Multicallable {\n    /// @dev Apply `delegatecall` with the current contract to each calldata in `data`,\n    /// and store the `abi.encode` formatted results of each `delegatecall` into `results`.\n    /// If any of the `delegatecall`s reverts, the entire context is reverted,\n    /// and the error is bubbled up.\n    ///\n    /// By default, this function directly returns the results and terminates the call context.\n    /// If you need to add before and after actions to the multicall, please override this function.\n    function multicall(bytes[] calldata data) public payable virtual returns (bytes[] memory) {\n        // Revert if `msg.value` is non-zero by default to guard against double-spending.\n        // (See: https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong)\n        //\n        // If you really need to pass in a `msg.value`, then you will have to\n        // override this function and add in any relevant before and after checks.\n        if (msg.value != 0) revert();\n        // `_multicallDirectReturn` returns the results directly and terminates the call context.\n        _multicallDirectReturn(_multicall(data));\n    }\n\n    /// @dev The inner logic of `multicall`.\n    /// This function is included so that you can override `multicall`\n    /// to add before and after actions, and use the `_multicallDirectReturn` function.\n    function _multicall(bytes[] calldata data) internal virtual returns (bytes32 results) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            results := mload(0x40)\n            mstore(results, 0x20)\n            mstore(add(0x20, results), data.length)\n            let c := add(0x40, results)\n            let s := c\n            let end := shl(5, data.length)\n            calldatacopy(c, data.offset, end)\n            end := add(c, end)\n            let m := end\n            if data.length {\n                for {} 1 {} {\n                    let o := add(data.offset, mload(c))\n                    calldatacopy(m, add(o, 0x20), calldataload(o))\n                    // forgefmt: disable-next-item\n                    if iszero(delegatecall(gas(), address(), m, calldataload(o), codesize(), 0x00)) {\n                        // Bubble up the revert if the delegatecall reverts.\n                        returndatacopy(results, 0x00, returndatasize())\n                        revert(results, returndatasize())\n                    }\n                    mstore(c, sub(m, s))\n                    c := add(0x20, c)\n                    // Append the `returndatasize()`, and the return data.\n                    mstore(m, returndatasize())\n                    let b := add(m, 0x20)\n                    returndatacopy(b, 0x00, returndatasize())\n                    // Advance `m` by `returndatasize() + 0x20`,\n                    // rounded up to the next multiple of 32.\n                    m := and(add(add(b, returndatasize()), 0x1f), 0xffffffffffffffe0)\n                    mstore(add(b, returndatasize()), 0) // Zeroize the slot after the returndata.\n                    if iszero(lt(c, end)) { break }\n                }\n            }\n            mstore(0x40, m) // Allocate memory.\n            results := or(shl(64, m), results) // Pack the bytes length into `results`.\n        }\n    }\n\n    /// @dev Decodes the `results` into an array of bytes.\n    /// This can be useful if you need to access the results or re-encode it.\n    function _multicallResultsToBytesArray(bytes32 results)\n        internal\n        pure\n        virtual\n        returns (bytes[] memory decoded)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            decoded := mload(0x40)\n            let c := and(0xffffffffffffffff, results) // Extract the offset.\n            mstore(decoded, mload(add(c, 0x20))) // Store the length.\n            let o := add(decoded, 0x20) // Start of elements in `decoded`.\n            let end := add(o, shl(5, mload(decoded)))\n            mstore(0x40, end) // Allocate memory.\n            let s := add(c, 0x40) // Start of elements in `results`.\n            let d := sub(s, o) // Difference between input and output pointers.\n            for {} iszero(eq(o, end)) { o := add(o, 0x20) } { mstore(o, add(mload(add(d, o)), s)) }\n        }\n    }\n\n    /// @dev Directly returns the `results` and terminates the current call context.\n    /// `results` must be from `_multicall`, else behavior is undefined.\n    function _multicallDirectReturn(bytes32 results) internal pure virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            return(and(0xffffffffffffffff, results), shr(64, results))\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "forge-std/=lib/forge-std/src/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}