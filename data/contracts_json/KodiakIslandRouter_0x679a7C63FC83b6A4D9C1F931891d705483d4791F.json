{
  "language": "Solidity",
  "sources": {
    "src/vaults/IslandRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.19;\n\nimport {IIslandRouter, RouterSwapParams} from \"./interfaces/IIslandRouter.sol\";\nimport {IKodiakIsland} from \"./interfaces/IKodiakIsland.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin-8/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin-8/contracts/utils/Address.sol\";\n\ncontract IslandRouter is IIslandRouter {\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable wBera;\n    address public immutable kodiakRouter;\n\n    constructor(IWETH _wBera, address _kodiakRouter) {\n        wBera = _wBera;\n        kodiakRouter = _kodiakRouter;\n    }\n\n    /// @notice addLiquidity adds liquidity to KodiakIsland of interest (mints Island tokens)\n    /// @param island address of KodiakIsland to add liquidity to\n    /// @param amount0Max the maximum amount of token0 msg.sender willing to input\n    /// @param amount1Max the maximum amount of token1 msg.sender willing to input\n    /// @param amount0Min the minimum amount of token0 actually input (slippage protection)\n    /// @param amount1Min the minimum amount of token1 actually input (slippage protection)\n    /// @param amountSharesMin the minimum amount of shares minted (slippage protection)\n    /// @param receiver account to receive minted KodiakIsland tokens\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount amount of KodiakIsland tokens minted and transferred to `receiver`\n    function addLiquidity(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external override returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        return _addLiquidity(island, amount0Max, amount1Max, amount0Min, amount1Min, amountSharesMin, receiver);\n    }\n\n    /// @notice addLiquidityNative same as addLiquidity but expects Bera transfers (instead of Wbera)\n    function addLiquidityNative(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external payable override returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        return _addLiquidityNative(island, amount0Max, amount1Max, amount0Min, amount1Min, amountSharesMin, receiver);\n    }\n\n    /// @notice addLiquiditySingleNative adds liquidity to KodiakIsland with native token. Native token is wrapped and swapped for the other token. Returns unused wBera as native token back to msg.sender\n    /// @param island address of KodiakIsland to add liquidity. One of the underlying island tokens must be wBera\n    /// @param amountSharesMin the minimum amount of shares minted (slippage protection)\n    /// @param maxStakingSlippageBPS the maximum slippage allowed for staking (in BPS)\n    /// @param swapData the swap data for swapping wBera for token0 or token1\n    /// @param receiver account to receive minted KodiakIsland tokens\n    /// @return amount0 - amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 - amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount - amount of KodiakIsland tokens minted and transferred to `receiver`\n    function addLiquiditySingleNative(\n        IKodiakIsland island,\n        uint256 amountSharesMin,\n        uint256 maxStakingSlippageBPS,\n        RouterSwapParams calldata swapData,\n        address receiver\n    ) external payable override returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        require(maxStakingSlippageBPS <= 10000, \"staking slippage too high\");\n        wBera.deposit{value: msg.value}();\n        IERC20 token0 = island.token0();\n        IERC20 token1 = island.token1();\n\n        // This also verifies that one of the tokens is wBera\n        bool __isToken0WBera = _isToken0WBera(address(token0), address(token1));\n\n        (uint256 token0Balance, uint256 token1Balance) = _swapAndVerify(token0, token1, IERC20(address(wBera)), swapData);\n\n        (amount0, amount1, mintAmount) = island.getMintAmounts(token0Balance, token1Balance);\n        require(mintAmount >= amountSharesMin, \"Staking: below min share amount\");\n\n        token0Balance -= amount0;\n        token1Balance -= amount1;\n\n        if (__isToken0WBera) {\n            require(amount1 >= (token1Balance + amount1) * (10000 - maxStakingSlippageBPS) / 10000, \"Staking Slippage: below min amounts\");\n            _deposit(island, amount0, amount1, mintAmount, receiver);\n            if (token0Balance > 0) {\n                wBera.withdraw(token0Balance);\n                payable(msg.sender).sendValue(token0Balance);\n            }\n            if (token1Balance > 0) token1.safeTransfer(msg.sender, token1Balance);\n        } else {\n            require(amount0 >= (token0Balance + amount0) * (10000 - maxStakingSlippageBPS) / 10000, \"Staking Slippage: below min amounts\");\n            _deposit(island, amount0, amount1, mintAmount, receiver);\n            if (token1Balance > 0) {\n                wBera.withdraw(token1Balance);\n                payable(msg.sender).sendValue(token1Balance);\n            }\n            if (token0Balance > 0) token0.safeTransfer(msg.sender, token0Balance);\n        }\n    }\n\n    /// @notice addLiquiditySingle adds liquidity to KodiakIsland with one of the underlying Island tokens. Tokens are swapped for the other token to deposit into the island\n    /// @param island address of KodiakIsland to add liquidity\n    /// @param totalAmountIn the total amount of tokenIn transferred from msg.sender\n    /// @param amountSharesMin the minimum amount of shares minted (slippage protection)\n    /// @param maxStakingSlippageBPS the maximum slippage allowed for staking (in BPS)\n    /// @param swapData the swap data for swapping tokenIn for token0 or token1\n    /// @param receiver account to receive minted KodiakIsland tokens\n    /// @return amount0 - amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 - amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount - amount of KodiakIsland tokens minted and transferred to `receiver`\n    function addLiquiditySingle(\n        IKodiakIsland island,\n        uint256 totalAmountIn,\n        uint256 amountSharesMin,\n        uint256 maxStakingSlippageBPS,\n        RouterSwapParams calldata swapData,\n        address receiver\n    ) external override returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        require(maxStakingSlippageBPS <= 10000, \"staking slippage too high\");\n        IERC20 token0 = island.token0();\n        IERC20 token1 = island.token1();\n        IERC20 tokenIn = swapData.zeroForOne ? token0 : token1;\n        tokenIn.safeTransferFrom(msg.sender, address(this), totalAmountIn);\n        (uint256 token0Balance, uint256 token1Balance) = _swapAndVerify(token0, token1, tokenIn, swapData);\n        //Find the amounts needed to mint\n        (amount0, amount1, mintAmount) = island.getMintAmounts(token0Balance, token1Balance);\n        require(mintAmount >= amountSharesMin, \"Staking: below min share amount\");\n\n        if (swapData.zeroForOne) require(amount1 >= token1Balance * (10000 - maxStakingSlippageBPS) / 10000, \"Staking Slippage: below min amounts\");\n        else require(amount0 >= token0Balance * (10000 - maxStakingSlippageBPS) / 10000, \"Staking Slippage: below min amounts\");\n\n        token0Balance -= amount0;\n        token1Balance -= amount1;\n\n        _deposit(island, amount0, amount1, mintAmount, receiver);\n\n        // refunds unused tokens\n        if (token0Balance > 0) token0.safeTransfer(msg.sender, token0Balance);\n        if (token1Balance > 0) token1.safeTransfer(msg.sender, token1Balance);\n    }\n\n    /// @notice removeLiquidity removes liquidity from a KodiakIsland and burns LP tokens\n    /// @param burnAmount The number of KodiakIsland tokens to burn\n    /// @param amount0Min Minimum amount of token0 received after burn (slippage protection)\n    /// @param amount1Min Minimum amount of token1 received after burn (slippage protection)\n    /// @param receiver The account to receive the underlying amounts of token0 and token1\n    /// @return amount0 actual amount of token0 transferred to receiver for burning `burnAmount`\n    /// @return amount1 actual amount of token1 transferred to receiver for burning `burnAmount`\n    /// @return liquidityBurned amount of liquidity removed from the underlying Uniswap V3 position\n    function removeLiquidity(\n        IKodiakIsland island,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address receiver\n    ) external override returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned) {\n        IERC20(address(island)).safeTransferFrom(msg.sender, address(this), burnAmount);\n        (amount0, amount1, liquidityBurned) = island.burn(burnAmount, receiver);\n        require(amount0 >= amount0Min && amount1 >= amount1Min, \"received below minimum\");\n    }\n\n    /// @notice removeLiquidityNative same as removeLiquidity\n    /// except this function unwraps Wbera and sends Bera to receiver account\n    function removeLiquidityNative(\n        IKodiakIsland island,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address payable receiver\n    ) external override returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned) {\n        IERC20 token0 = island.token0();\n        IERC20 token1 = island.token1();\n\n        bool wBeraToken0 = _isToken0WBera(address(token0), address(token1));\n\n        IERC20(address(island)).safeTransferFrom(msg.sender, address(this), burnAmount);\n        (amount0, amount1, liquidityBurned) = island.burn(burnAmount, address(this));\n        require(amount0 >= amount0Min && amount1 >= amount1Min, \"received below minimum\");\n\n        if (wBeraToken0) {\n            if (amount0 > 0) {\n                wBera.withdraw(amount0);\n                receiver.sendValue(amount0);\n            }\n            if (amount1 > 0) token1.safeTransfer(receiver, amount1);\n        } else {\n            if (amount1 > 0) {\n                wBera.withdraw(amount1);\n                receiver.sendValue(amount1);\n            }\n            if (amount0 > 0) token0.safeTransfer(receiver, amount0);\n        }\n    }\n\n    //// Fallback function\n    receive() external payable {}\n\n    //// Internal functions\n\n    function _addLiquidity(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) internal returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        IERC20 token0 = island.token0();\n        IERC20 token1 = island.token1();\n        (uint256 amount0In, uint256 amount1In, uint256 _mintAmount) = island.getMintAmounts(amount0Max, amount1Max);\n        require(amount0In >= amount0Min && amount1In >= amount1Min && _mintAmount >= amountSharesMin, \"below min amounts\");\n\n        if (amount0In > 0) token0.safeTransferFrom(msg.sender, address(this), amount0In);\n        if (amount1In > 0) token1.safeTransferFrom(msg.sender, address(this), amount1In);\n\n        return _deposit(island, amount0In, amount1In, _mintAmount, receiver);\n    }\n\n    function _addLiquidityNative(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) internal returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        IERC20 token0 = island.token0();\n        IERC20 token1 = island.token1();\n\n        (uint256 amount0In, uint256 amount1In, uint256 _mintAmount) = island.getMintAmounts(amount0Max, amount1Max);\n        require(amount0In >= amount0Min && amount1In >= amount1Min && _mintAmount >= amountSharesMin, \"below min amounts\");\n\n        if (_isToken0WBera(address(token0), address(token1))) {\n            require(amount0Max == msg.value, \"not enough bera\");\n            if (amount0In > 0) wBera.deposit{value: amount0In}();\n            if (amount1In > 0) token1.safeTransferFrom(msg.sender, address(this), amount1In);\n        } else {\n            require(amount1Max == msg.value, \"not enough bera\");\n            if (amount1In > 0) wBera.deposit{value: amount1In}();\n            if (amount0In > 0) token0.safeTransferFrom(msg.sender, address(this), amount0In);\n        }\n\n        (amount0, amount1, mintAmount) = _deposit(island, amount0In, amount1In, _mintAmount, receiver);\n\n        if (_isToken0WBera(address(token0), address(token1))) {\n            if (amount0Max > amount0) payable(msg.sender).sendValue(amount0Max - amount0);\n        } else if (amount1Max > amount1) payable(msg.sender).sendValue(amount1Max - amount1);\n    }\n\n    function _deposit(\n        IKodiakIsland island,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 _mintAmount,\n        address receiver\n    ) internal returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\n        if (amount0In > 0) island.token0().safeIncreaseAllowance(address(island), amount0In);\n        if (amount1In > 0) island.token1().safeIncreaseAllowance(address(island), amount1In);\n\n        (amount0, amount1,) = island.mint(_mintAmount, receiver);\n        require(amount0 == amount0In && amount1 == amount1In, \"unexpected amounts deposited\");\n        mintAmount = _mintAmount;\n    }\n\n    function _isToken0WBera(address token0, address token1) internal view returns (bool wBeraToken0) {\n        if (token0 == address(wBera)) wBeraToken0 = true;\n        else if (token1 == address(wBera)) wBeraToken0 = false;\n        else revert(\"one island token must be wBera\");\n    }\n\n    /// @notice _swapAndVerify swaps tokenIn for token0 or token1\n    /// @param token0 the first token of the island\n    /// @param token1 the second token of the island\n    /// @param tokenIn the token to swap\n    /// @param swapData the swap\n    /// @return token0Balance the balance of token0 after the swap\n    /// @return token1Balance the balance of token1 after the swap\n    function _swapAndVerify(IERC20 token0, IERC20 token1, IERC20 tokenIn, RouterSwapParams calldata swapData) internal returns (uint256 token0Balance, uint256 token1Balance) {\n        tokenIn.safeIncreaseAllowance(kodiakRouter, swapData.amountIn);\n        (bool success,) = kodiakRouter.call(swapData.routeData);\n        require(success, \"Swap: swap failed\");\n        token0Balance = token0.balanceOf(address(this));\n        token1Balance = token1.balanceOf(address(this));\n        if (address(token0) == address(tokenIn)) require(token1Balance >= swapData.minAmountOut, \"Swap: insufficient tokenOut\");\n        else require(token0Balance >= swapData.minAmountOut, \"Swap: insufficient tokenOut\");\n    }\n}\n"
    },
    "src/vaults/interfaces/IIslandRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.19;\n\nimport {IKodiakIsland} from \"./IKodiakIsland.sol\";\nimport {IWETH} from \"./IWETH.sol\";\nstruct RouterSwapParams {\n    uint256 amountIn;\n    uint256 minAmountOut;\n    bool zeroForOne;\n    bytes routeData;\n}\n\ninterface IIslandRouter {\n    function addLiquidity(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function addLiquidityNative(\n        IKodiakIsland island,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external payable returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function removeLiquidity(\n        IKodiakIsland island,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\n\n    function removeLiquidityNative(\n        IKodiakIsland island,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address payable receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\n\n    function addLiquiditySingle(\n        IKodiakIsland island,\n        uint256 totalAmountIn,\n        uint256 amountSharesMin,\n        uint256 maxStakingSlippageBPS,\n        RouterSwapParams calldata swapData,\n        address receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function addLiquiditySingleNative(\n        IKodiakIsland island,\n        uint256 amountSharesMin,\n        uint256 maxStakingSlippageBPS,\n        RouterSwapParams calldata swapData,\n        address receiver\n    ) external payable returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function kodiakRouter() external view returns (address);\n\n    function wBera() external view returns (IWETH);\n}\n"
    },
    "src/vaults/interfaces/IKodiakIsland.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.19;\nimport {IERC20} from \"@openzeppelin-8/contracts/interfaces/IERC20.sol\";\nimport {IUniswapV3Pool} from \"./IUniswapV3Pool.sol\";\n\ninterface IKodiakIsland {\n    function mint(uint256 mintAmount, address receiver) external returns (uint256 amount0, uint256 amount1, uint128 liquidityMinted);\n    function burn(uint256 burnAmount, address receiver) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max) external view returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n    function token0() external view returns (IERC20);\n    function token1() external view returns (IERC20);\n    function getUnderlyingBalances() external view returns (uint256 amount0, uint256 amount1);\n    // Additional view functions that might be useful to expose:\n    function totalSupply() external view returns (uint256);\n    function pool() external view returns (IUniswapV3Pool);\n    function lowerTick() external view returns (int24);\n    function upperTick() external view returns (int24);\n    function managerFeeBPS() external view returns (uint16);\n    function managerBalance0() external view returns (uint256);\n    function managerBalance1() external view returns (uint256);\n    function managerTreasury() external view returns (address);\n    function compounderSlippageInterval() external view returns (uint32);\n    function compounderSlippageBPS() external view returns (uint16);\n}\n"
    },
    "src/vaults/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.19;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "lib/openzeppelin-contracts-new/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-new/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-new/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "src/vaults/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.19;\n\ninterface IUniswapV3Pool {\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function positions(bytes32 key) external view returns (\n        uint128 _liquidity,\n        uint256 feeGrowthInside0LastX128,\n        uint256 feeGrowthInside1LastX128,\n        uint128 tokensOwed0,\n        uint128 tokensOwed1\n    );\n\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    function slot0() external view returns (\n        uint160 sqrtPriceX96,\n        int24 tick,\n        uint16 observationIndex,\n        uint16 observationCardinality,\n        uint16 observationCardinalityNext,\n        uint32 feeProtocol,\n        bool unlocked\n    );\n\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    function ticks(int24 tick) external view returns (\n        uint128 liquidityGross,\n        int128 liquidityNet,\n        uint256 feeGrowthOutside0X128,\n        uint256 feeGrowthOutside1X128,\n        int56 tickCumulativeOutside,\n        uint160 secondsPerLiquidityOutsideX128,\n        uint32 secondsOutside,\n        bool initialized\n    );\n\n    function observe(uint32[] calldata secondsAgos) external view returns (\n        int56[] memory tickCumulatives,\n        uint160[] memory secondsPerLiquidityCumulativeX128s\n    );\n\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function fee() external view returns (uint24);\n\n    function tickSpacing() external view returns (int24);\n\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "lib/openzeppelin-contracts-new/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-new/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "forge-std/=lib/forge-std/src/",
      "@uniswap/lib/=lib/solidity-lib/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "base64-sol/=lib/base64/",
      "@kodiak-finance/v3-periphery/contracts/=src/pools/v3-periphery/",
      "@kodiak-finance/v2-periphery/contracts/=src/pools/v2-periphery/",
      "@kodiak-finance/v2-core/contracts/=lib/v2-core/contracts/",
      "@kodiak-finance/v3-core/contracts/libraries/=lib/v3-core/contracts/libraries/",
      "@kodiak-finance/v3-core/contracts/interfaces/=lib/@kodiak-finance/v3-core/contracts/interfaces/",
      "@openzeppelin-8/contracts/=lib/openzeppelin-contracts-new/contracts/",
      "base64/=lib/base64/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-new/lib/erc4626-tests/",
      "openzeppelin-contracts-new/=lib/openzeppelin-contracts-new/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
      "openzeppelin/=lib/openzeppelin-contracts-new/contracts/",
      "solidity-lib/=lib/solidity-lib/contracts/",
      "v2-core/=lib/v2-core/contracts/",
      "v3-core/=lib/v3-core/",
      "@kodiak-finance/v3-periphery/contracts/=src/pools/v3-periphery/",
      "@kodiak-finance/v2-periphery/contracts/=src/pools/v2-periphery/",
      "@kodiak-finance/v2-core/contracts/=lib/v2-core/contracts/",
      "@kodiak-finance/v3-core/contracts/libraries/=lib/v3-core/contracts/libraries/",
      "@openzeppelin/contracts-upgradeable/=lib/kodiak-core/lib/openzeppelin-contracts-upgradeable/contracts/",
      "@uniswap/v2-core/=lib/kodiak-core/lib/v2-core/",
      "@uniswap/v2-periphery/=lib/kodiak-core/lib/v2-periphery/",
      "@uniswap/v3-core/=lib/kodiak-core/lib/v3-core/",
      "@uniswap/v3-periphery/=lib/kodiak-core/lib/v3-periphery/",
      "create3-factory/=lib/kodiak-core/lib/create3-factory/",
      "kodiak-core/=lib/kodiak-core/",
      "local/=lib/kodiak-core/src/",
      "openzeppelin-contracts-upgradeable/=lib/kodiak-core/lib/openzeppelin-contracts-upgradeable/contracts/",
      "oz-8-upgradeable/=lib/oz-8-upgradeable/contracts/",
      "oz-8/=lib/oz-8/contracts/",
      "solmate/=lib/solmate/src/",
      "v2-periphery/=lib/v2-periphery/contracts/",
      "v3-periphery/=lib/v3-periphery/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}